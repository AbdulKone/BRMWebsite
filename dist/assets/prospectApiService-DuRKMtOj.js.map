{"version":3,"file":"prospectApiService-DuRKMtOj.js","sources":["../../src/lib/hunterCache.ts","../../src/lib/apiUsageMonitor.ts","../../src/lib/prospectApiService.ts"],"sourcesContent":["import { HunterProspect, ProspectSearchCriteria } from './types/hunterTypes';\n\ninterface HunterCacheItem {\n  data: HunterProspect[];\n  timestamp: number;\n  ttl: number;\n  requestCount: number;\n}\n\ninterface CacheStats {\n  totalRequests: number;\n  cacheHits: number;\n  cacheMisses: number;\n  apiCallsSaved: number;\n}\n\nclass HunterCache {\n  private cache = new Map<string, HunterCacheItem>();\n  private readonly STORAGE_KEY = 'hunter_cache_v2';\n  private readonly STATS_KEY = 'hunter_cache_stats';\n  private stats: CacheStats;\n\n  constructor() {\n    this.stats = {\n      totalRequests: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      apiCallsSaved: 0\n    };\n    this.loadFromLocalStorage();\n    this.loadStats();\n    setInterval(() => this.cleanup(), 60 * 60 * 1000);\n  }\n\n  generateKey(action: string, params: ProspectSearchCriteria | Record<string, unknown>): string {\n    const normalizedParams = this.normalizeParams(params);\n    return `hunter_${action}_${JSON.stringify(normalizedParams)}`;\n  }\n\n  private normalizeParams(params: ProspectSearchCriteria | Record<string, unknown>): Record<string, unknown> {\n    const normalized = { ...params };\n    delete (normalized as Record<string, unknown>).timestamp;\n    delete (normalized as Record<string, unknown>).requestId;\n    \n    return Object.keys(normalized)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = (normalized as Record<string, unknown>)[key];\n        return result;\n      }, {} as Record<string, unknown>);\n  }\n\n  set(key: string, data: HunterProspect[], ttl: number): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl,\n      requestCount: 1\n    });\n    this.saveToLocalStorage();\n  }\n\n  get(key: string): HunterProspect[] | null {\n    this.stats.totalRequests++;\n    \n    const item = this.cache.get(key);\n    if (!item) {\n      this.stats.cacheMisses++;\n      this.saveStats();\n      return null;\n    }\n\n    if (Date.now() - item.timestamp > item.ttl) {\n      this.cache.delete(key);\n      this.stats.cacheMisses++;\n      this.saveToLocalStorage();\n      this.saveStats();\n      return null;\n    }\n\n    item.requestCount++;\n    this.stats.cacheHits++;\n    this.stats.apiCallsSaved++;\n    this.saveStats();\n    \n    return item.data;\n  }\n\n  getStats(): CacheStats {\n    return { ...this.stats };\n  }\n\n  private saveStats(): void {\n    try {\n      localStorage.setItem(this.STATS_KEY, JSON.stringify(this.stats));\n    } catch (error) {\n      console.warn('Impossible de sauvegarder les statistiques:', error);\n    }\n  }\n\n  private loadStats(): void {\n    try {\n      const stored = localStorage.getItem(this.STATS_KEY);\n      if (stored) {\n        this.stats = { ...this.stats, ...JSON.parse(stored) };\n      }\n    } catch (error) {\n      console.warn('Impossible de charger les statistiques:', error);\n    }\n  }\n\n  clear(): void {\n    this.cache.clear();\n    this.saveToLocalStorage();\n  }\n\n  private saveToLocalStorage(): void {\n    try {\n      const cacheData = Array.from(this.cache.entries());\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(cacheData));\n    } catch (error) {\n      console.warn('Impossible de sauvegarder le cache:', error);\n    }\n  }\n\n  private loadFromLocalStorage(): void {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (stored) {\n        const cacheData = JSON.parse(stored) as [string, HunterCacheItem][];\n        this.cache = new Map(cacheData);\n      }\n    } catch (error) {\n      console.warn('Impossible de charger le cache:', error);\n      this.cache = new Map();\n    }\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    for (const [key, item] of this.cache.entries()) {\n      if (now - item.timestamp > item.ttl) {\n        this.cache.delete(key);\n      }\n    }\n    this.saveToLocalStorage();\n  }\n}\n\nexport const hunterCache = new HunterCache();","interface DailyUsage {\n  date: string;\n  requests: number;\n  cached: number;\n  domains: Set<string>;\n  companies: Set<string>;\n}\n\ninterface UsageAlert {\n  type: 'warning' | 'critical' | 'info';\n  message: string;\n  percentage: number;\n}\n\nclass ApiUsageMonitor {\n  private readonly DAILY_LIMIT = 5; // Répartir 25 requêtes/mois sur ~5 par jour\n  private readonly MONTHLY_LIMIT = 25; // Plan gratuit Hunter.io\n  private readonly WARNING_THRESHOLD = 0.7; // 70% (plus conservateur)\n  private readonly CRITICAL_THRESHOLD = 0.9; // 90% (plus conservateur)\n  private readonly STORAGE_KEY = 'hunter_usage_monitor';\n\n  private usage: Map<string, DailyUsage> = new Map();\n\n  constructor() {\n    this.loadUsage();\n    // Nettoyage des données anciennes (> 30 jours)\n    this.cleanupOldData();\n  }\n\n  private getTodayKey(): string {\n    return new Date().toISOString().split('T')[0];\n  }\n\n  private getMonthKey(): string {\n    const now = new Date();\n    return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;\n  }\n\n  getTodayUsage(): DailyUsage {\n    const today = this.getTodayKey();\n    return this.usage.get(today) || {\n      date: today,\n      requests: 0,\n      cached: 0,\n      domains: new Set(),\n      companies: new Set()\n    };\n  }\n\n  getMonthlyUsage(): number {\n    const monthKey = this.getMonthKey();\n    let total = 0;\n    \n    for (const [date, usage] of this.usage.entries()) {\n      if (date.startsWith(monthKey)) {\n        total += usage.requests;\n      }\n    }\n    \n    return total;\n  }\n\n  incrementUsage(type: 'api' | 'cache', domain?: string, company?: string): void {\n    const today = this.getTodayKey();\n    const todayUsage = this.getTodayUsage();\n    \n    if (type === 'api') {\n      todayUsage.requests++;\n      if (domain) todayUsage.domains.add(domain);\n      if (company) todayUsage.companies.add(company);\n    } else {\n      todayUsage.cached++;\n    }\n    \n    this.usage.set(today, todayUsage);\n    this.saveUsage();\n    \n    // Vérifier les alertes\n    this.checkAlerts();\n  }\n\n  canMakeRequest(): boolean {\n    const todayUsage = this.getTodayUsage();\n    return todayUsage.requests < this.DAILY_LIMIT;\n  }\n\n  getRemainingQuota(): { daily: number; monthly: number } {\n    const todayUsage = this.getTodayUsage();\n    const monthlyUsage = this.getMonthlyUsage();\n    \n    return {\n      daily: Math.max(0, this.DAILY_LIMIT - todayUsage.requests),\n      monthly: Math.max(0, this.MONTHLY_LIMIT - monthlyUsage)\n    };\n  }\n\n  getUsagePercentage(): { daily: number; monthly: number } {\n    const todayUsage = this.getTodayUsage();\n    const monthlyUsage = this.getMonthlyUsage();\n    \n    return {\n      daily: (todayUsage.requests / this.DAILY_LIMIT) * 100,\n      monthly: (monthlyUsage / this.MONTHLY_LIMIT) * 100\n    };\n  }\n\n  checkAlerts(): UsageAlert[] {\n    const alerts: UsageAlert[] = [];\n    const percentages = this.getUsagePercentage();\n    const remaining = this.getRemainingQuota();\n    \n    // Alerte quotidienne\n    if (percentages.daily >= this.CRITICAL_THRESHOLD * 100) {\n      alerts.push({\n        type: 'critical',\n        message: `⚠️ Quota quotidien critique: ${remaining.daily} appels restants`,\n        percentage: percentages.daily\n      });\n    } else if (percentages.daily >= this.WARNING_THRESHOLD * 100) {\n      alerts.push({\n        type: 'warning',\n        message: `⚡ Attention: ${remaining.daily} appels restants aujourd'hui`,\n        percentage: percentages.daily\n      });\n    }\n    \n    // Alerte mensuelle\n    if (percentages.monthly >= this.WARNING_THRESHOLD * 100) {\n      alerts.push({\n        type: 'warning',\n        message: `📊 Quota mensuel: ${remaining.monthly} appels restants`,\n        percentage: percentages.monthly\n      });\n    }\n    \n    // Afficher les alertes\n    alerts.forEach(alert => {\n      if (alert.type === 'critical') {\n        console.error(alert.message);\n      } else {\n        console.warn(alert.message);\n      }\n    });\n    \n    return alerts;\n  }\n\n  getEfficiencyStats(): {\n    cacheHitRate: number;\n    apiCallsSaved: number;\n    totalRequests: number;\n  } {\n    const todayUsage = this.getTodayUsage();\n    const totalRequests = todayUsage.requests + todayUsage.cached;\n    \n    return {\n      cacheHitRate: totalRequests > 0 ? (todayUsage.cached / totalRequests) * 100 : 0,\n      apiCallsSaved: todayUsage.cached,\n      totalRequests\n    };\n  }\n\n  private saveUsage(): void {\n    try {\n      const data = Array.from(this.usage.entries()).map(([date, usage]) => ([\n        date,\n        {\n          ...usage,\n          domains: Array.from(usage.domains),\n          companies: Array.from(usage.companies)\n        }\n      ]));\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(data));\n    } catch (error) {\n      console.warn('Erreur sauvegarde usage monitor:', error);\n    }\n  }\n\n  private loadUsage(): void {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (stored) {\n        const data = JSON.parse(stored);\n        this.usage = new Map(data.map(([date, usage]: [string, any]) => [\n          date,\n          {\n            ...usage,\n            domains: new Set(usage.domains || []),\n            companies: new Set(usage.companies || [])\n          }\n        ]));\n      }\n    } catch (error) {\n      console.warn('Erreur chargement usage monitor:', error);\n      this.usage.clear();\n    }\n  }\n\n  private cleanupOldData(): void {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const cutoffDate = thirtyDaysAgo.toISOString().split('T')[0];\n    \n    let cleaned = 0;\n    for (const [date] of this.usage.entries()) {\n      if (date < cutoffDate) {\n        this.usage.delete(date);\n        cleaned++;\n      }\n    }\n    \n    if (cleaned > 0) {\n      console.log(`🧹 Données d'usage nettoyées: ${cleaned} jours supprimés`);\n      this.saveUsage();\n    }\n  }\n\n  reset(): void {\n    this.usage.clear();\n    localStorage.removeItem(this.STORAGE_KEY);\n  }\n}\n\nexport const apiUsageMonitor = new ApiUsageMonitor();\nexport type { UsageAlert, DailyUsage };\n","import { supabase } from './supabase';\nimport { useErrorStore } from '../stores/errorStore';\nimport { hunterCache } from './hunterCache';\nimport { apiUsageMonitor } from './apiUsageMonitor';\nimport {\n  HunterProspect,\n  HunterDomainSearchResponse,\n  HunterDiscoverResponse,\n  ProspectSearchCriteria,\n  ApiUsageStats\n} from './types/hunterTypes';\n\ninterface ApiProvider {\n  name: string;\n  endpoint: string;\n  rateLimit: number;\n  fields: string[];\n  active: boolean;\n}\n\nexport class ProspectApiService {\n  private static providers: ApiProvider[] = [];\n  private static initialized = false;\n\n  static async initialize() {\n    if (this.initialized) return;\n    await this.loadProviders();\n    this.initialized = true;\n  }\n\n  private static async loadProviders() {\n    try {\n      const { data, error } = await supabase\n        .from('api_providers')\n        .select('*')\n        .eq('active', true);\n\n      if (error) throw error;\n\n      if (!data || data.length === 0) {\n        throw new Error('Aucun provider API configuré dans la base de données');\n      }\n\n      this.providers = data;\n    } catch (error) {\n      console.error('Erreur lors du chargement des providers:', error);\n      throw new Error('Impossible de charger les providers API depuis la base de données');\n    }\n  }\n\n  // Méthode principale de recherche optimisée\n  static async fetchProspects(criteria: ProspectSearchCriteria): Promise<HunterProspect[]> {\n    await this.initialize();\n    \n    if (!apiUsageMonitor.canMakeRequest()) {\n      const remaining = apiUsageMonitor.getRemainingQuota();\n      throw new Error(`Quota quotidien atteint. Restant: ${remaining.daily} appels`);\n    }\n    \n    const prospects: HunterProspect[] = [];\n    const { handleError } = useErrorStore.getState();\n\n    const activeProviders = this.providers.slice(0, 1);\n\n    for (const provider of activeProviders) {\n      try {\n        const apiProspects = await this.callProvider(provider, criteria);\n        const validatedProspects = await this.validateProspects(apiProspects);\n        prospects.push(...validatedProspects);\n        \n        if (prospects.length >= (criteria.limit || 25)) break;\n      } catch (error: unknown) {\n        const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';\n        handleError(`Erreur API ${provider.name}`, errorMessage);\n        continue;\n      }\n    }\n\n    return this.deduplicateProspects(prospects.slice(0, criteria.limit || 25));\n  }\n\n  // Validation améliorée des prospects\n  private static async validateProspects(prospects: HunterProspect[]): Promise<HunterProspect[]> {\n    return prospects\n      .filter(prospect => {\n        return prospect.email && \n               prospect.email.includes('@') && \n               prospect.confidence >= 60 && \n               prospect.email.length > 5;\n      })\n      .map(prospect => ({\n        ...prospect,\n        score: this.calculateScore(prospect),\n        validated_at: new Date().toISOString()\n      }))\n      .sort((a, b) => (b.score || 0) - (a.score || 0));\n  }\n\n  // Calcul de score amélioré\n  private static calculateScore(prospect: HunterProspect): number {\n    let score = prospect.confidence || 50;\n    \n    if (prospect.first_name && prospect.last_name) score += 10;\n    if (prospect.position) score += 15;\n    if (prospect.linkedin) score += 10;\n    if (prospect.department) score += 5;\n    \n    if (prospect.sources && prospect.sources > 1) score += prospect.sources * 2;\n    \n    return Math.min(100, score);\n  }\n\n  // Déduplication améliorée\n  private static deduplicateProspects(prospects: HunterProspect[]): HunterProspect[] {\n    const seen = new Set<string>();\n    return prospects.filter(prospect => {\n      const key = `${prospect.email.toLowerCase()}_${prospect.company?.toLowerCase() || ''}`;\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n\n  private static async callProvider(provider: ApiProvider, criteria: ProspectSearchCriteria): Promise<HunterProspect[]> {\n    if (provider.name === 'Hunter.io') {\n      return await this.callHunterApi(criteria);\n    }\n    return [];\n  }\n\n  // API Hunter.io optimisée avec cache\n  private static async callHunterApi(criteria: ProspectSearchCriteria): Promise<HunterProspect[]> {\n    const results: HunterProspect[] = [];\n    const MAX_RESULTS = 50; // Limite globale pour éviter les erreurs API\n    \n    if (criteria.domains && criteria.domains.length > 0) {\n      for (const domain of criteria.domains.slice(0, 3)) {\n        const domainResults = await this.searchHunterByDomain(domain);\n        results.push(...domainResults);\n        if (results.length >= 15) break;\n      }\n    }\n    \n    if (criteria.companyName && results.length < 10) {\n      const companyResults = await this.searchHunterByCompany(criteria.companyName);\n      results.push(...companyResults);\n    }\n    \n    if (criteria.keywords && criteria.keywords.length > 0 && results.length < 15) {\n      const dynamicResults = await this.searchHunterByDynamicCriteria(criteria);\n      results.push(...dynamicResults);\n    }\n    \n    if (criteria.naturalLanguageQuery && results.length < 10) {\n      const nlResults = await this.searchHunterByNaturalLanguage(criteria.naturalLanguageQuery);\n      results.push(...nlResults);\n    }\n    \n    // Avant chaque ajout, vérifier la limite\n    if (results.length < MAX_RESULTS) {\n      const newResults = await this.searchHunterByDomain(domain);\n      results.push(...newResults.slice(0, MAX_RESULTS - results.length));\n    }\n    \n    return results.slice(0, MAX_RESULTS); // Garantir la limite\n  }\n\n  // Recherche par domaine optimisée avec cache\n  private static async searchHunterByDomain(domain: string): Promise<HunterProspect[]> {\n    const cacheKey = hunterCache.generateKey('domain-search', { domain });\n    \n    const cached = hunterCache.get(cacheKey);\n    if (cached) {\n      apiUsageMonitor.incrementUsage('cache', domain);\n      return cached;\n    }\n    \n    if (!apiUsageMonitor.canMakeRequest()) {\n      console.warn('⚠️ Quota quotidien atteint, utilisation du cache uniquement');\n      return [];\n    }\n    \n    try {\n      const response = await fetch('/api/hunter-proxy', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          domain: domain,\n          action: 'domain-search',\n          limit: 5\n        })\n      });\n      \n      const data: HunterDomainSearchResponse = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Erreur API Hunter.io');\n      }\n      \n      const results: HunterProspect[] = (data.data?.emails || []).map((email) => ({\n        email: email.value,\n        first_name: email.first_name,\n        last_name: email.last_name,\n        position: email.position,\n        company: data.data?.organization || domain,\n        confidence: email.confidence,\n        sources: email.sources?.length || 0,\n        department: email.department,\n        seniority: email.seniority,\n        linkedin: email.linkedin\n      }));\n      \n      hunterCache.set(cacheKey, results, 24 * 60 * 60 * 1000);\n      apiUsageMonitor.incrementUsage('api', domain);\n      \n      console.log(`✅ API Hunter.io: ${results.length} prospects trouvés pour ${domain}`);\n      return results;\n    } catch (error: unknown) {\n      console.error(`Erreur recherche domaine ${domain}:`, error);\n      return [];\n    }\n  }\n\n  // Recherche par entreprise optimisée avec cache\n  private static async searchHunterByCompany(companyName: string): Promise<HunterProspect[]> {\n    const cacheKey = hunterCache.generateKey('company-search', { companyName });\n    \n    const cached = hunterCache.get(cacheKey);\n    if (cached) {\n      apiUsageMonitor.incrementUsage('cache', undefined, companyName);\n      return cached;\n    }\n    \n    if (!apiUsageMonitor.canMakeRequest()) {\n      console.warn('⚠️ Quota quotidien atteint, utilisation du cache uniquement');\n      return [];\n    }\n    \n    try {\n      const response = await fetch('/api/hunter-proxy', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'discover',\n          query: `company name: ${companyName}`,\n          limit: 3\n        })\n      });\n      \n      const data: HunterDiscoverResponse = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Erreur API Hunter.io Discover');\n      }\n      \n      const prospects: HunterProspect[] = [];\n      \n      if (data.data?.companies) {\n        for (const company of data.data.companies.slice(0, 2)) {\n          if (company.domain) {\n            const domainProspects = await this.searchHunterByDomain(company.domain);\n            prospects.push(...domainProspects.map((p) => ({\n              ...p,\n              company: company.name || companyName,\n              industry: company.industry,\n              company_size: company.size\n            })));\n          }\n        }\n      }\n      \n      hunterCache.set(cacheKey, prospects, 24 * 60 * 60 * 1000);\n      apiUsageMonitor.incrementUsage('api', undefined, companyName);\n      \n      console.log(`✅ API Hunter.io: ${prospects.length} prospects trouvés pour ${companyName}`);\n      return prospects;\n    } catch (error: unknown) {\n      console.error(`Erreur recherche entreprise ${companyName}:`, error);\n      return [];\n    }\n  }\n\n  // Recherche par critères dynamiques optimisée\n  private static async searchHunterByDynamicCriteria(criteria: ProspectSearchCriteria): Promise<HunterProspect[]> {\n    const cacheKey = hunterCache.generateKey('dynamic-search', criteria);\n    \n    const cached = hunterCache.get(cacheKey);\n    if (cached) {\n      apiUsageMonitor.incrementUsage('cache');\n      return cached;\n    }\n    \n    if (!apiUsageMonitor.canMakeRequest()) {\n      console.warn('⚠️ Quota quotidien atteint, utilisation du cache uniquement');\n      return [];\n    }\n    \n    try {\n      const queryParts: string[] = [];\n      \n      if (criteria.keywords && criteria.keywords.length > 0) {\n        queryParts.push(`keywords: ${criteria.keywords.slice(0, 2).join(' ')}`);\n      }\n      \n      if (criteria.quickFilters?.industry) {\n        queryParts.push(`industry: ${criteria.quickFilters.industry}`);\n      }\n      \n      if (criteria.quickFilters?.location) {\n        queryParts.push(`location: ${criteria.quickFilters.location}`);\n      }\n      \n      const query = queryParts.join(' AND ');\n      \n      if (!query) return [];\n      \n      const response = await fetch('/api/hunter-proxy', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'discover',\n          query: query,\n          limit: 10\n        })\n      });\n      \n      const data: HunterDiscoverResponse = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Erreur API Hunter.io Discover');\n      }\n      \n      const prospects: HunterProspect[] = [];\n      \n      if (data.data?.companies) {\n        for (const company of data.data.companies.slice(0, 2)) {\n          if (company.domain) {\n            const domainProspects = await this.searchHunterByDomain(company.domain);\n            prospects.push(...domainProspects.map((p) => ({\n              ...p,\n              company: company.name,\n              industry: company.industry,\n              company_size: company.size,\n              match_criteria: query\n            })));\n          }\n        }\n      }\n      \n      hunterCache.set(cacheKey, prospects, 12 * 60 * 60 * 1000);\n      apiUsageMonitor.incrementUsage('api');\n      \n      console.log(`✅ API Hunter.io: ${prospects.length} prospects trouvés pour critères dynamiques`);\n      return prospects;\n    } catch (error: unknown) {\n      console.error('Erreur recherche critères dynamiques:', error);\n      return [];\n    }\n  }\n\n  // Recherche en langage naturel optimisée\n  private static async searchHunterByNaturalLanguage(query: string): Promise<HunterProspect[]> {\n    const cacheKey = hunterCache.generateKey('natural-language', { query });\n    \n    const cached = hunterCache.get(cacheKey);\n    if (cached) {\n      apiUsageMonitor.incrementUsage('cache');\n      return cached;\n    }\n    \n    if (!apiUsageMonitor.canMakeRequest()) {\n      console.warn('⚠️ Quota quotidien atteint, utilisation du cache uniquement');\n      return [];\n    }\n    \n    try {\n      const response = await fetch('/api/hunter-proxy', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'discover',\n          query: query,\n          limit: 2\n        })\n      });\n      \n      const data: HunterDiscoverResponse = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Erreur API Hunter.io Discover');\n      }\n      \n      const prospects: HunterProspect[] = [];\n      \n      if (data.data?.companies) {\n        for (const company of data.data.companies.slice(0, 1)) {\n          if (company.domain) {\n            const domainProspects = await this.searchHunterByDomain(company.domain);\n            prospects.push(...domainProspects.map((p) => ({\n              ...p,\n              company: company.name,\n              industry: company.industry,\n              natural_query: query\n            })));\n          }\n        }\n      }\n      \n      hunterCache.set(cacheKey, prospects, 6 * 60 * 60 * 1000);\n      apiUsageMonitor.incrementUsage('api');\n      \n      console.log(`✅ API Hunter.io: ${prospects.length} prospects trouvés pour requête naturelle`);\n      return prospects;\n    } catch (error: unknown) {\n      console.error('Erreur recherche langage naturel:', error);\n      return [];\n    }\n  }\n\n  // Méthodes utilitaires pour le monitoring\n  static getUsageStats(): ApiUsageStats {\n    return {\n      cache: hunterCache.getStats(),\n      usage: apiUsageMonitor.getEfficiencyStats(),\n      quota: apiUsageMonitor.getRemainingQuota()\n    };\n  }\n\n  static clearCache(): void {\n    hunterCache.clear();\n    console.log('🧹 Cache Hunter.io vidé');\n  }\n}"],"names":["HunterCache","__publicField","action","params","normalizedParams","normalized","result","key","data","ttl","item","error","stored","cacheData","now","hunterCache","ApiUsageMonitor","today","monthKey","total","date","usage","type","domain","company","todayUsage","monthlyUsage","alerts","percentages","remaining","alert","totalRequests","thirtyDaysAgo","cutoffDate","cleaned","apiUsageMonitor","ProspectApiService","supabase","criteria","prospects","handleError","useErrorStore","activeProviders","provider","apiProspects","validatedProspects","errorMessage","prospect","a","b","score","seen","_a","results","domainResults","companyResults","dynamicResults","nlResults","newResults","cacheKey","cached","response","email","_b","companyName","domainProspects","p","queryParts","query","_c"],"mappings":"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"}