{
  "name": "Automatisation prospect 2 - Corrigé",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 360
            }
          ]
        }
      },
      "name": "Cron - Alimentation Prospects (15 jours)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [-2096, -192],
      "id": "2249acec-94dd-4195-bc4c-268df35a9de4"
    },
    {
      "parameters": {
        "url": "https://api.insee.fr/entreprises/sirene/V3/siret?q=activitePrincipaleEtablissement:73.1* OR activitePrincipaleEtablissement:73.2* OR activitePrincipaleEtablissement:59.1* OR activitePrincipaleEtablissement:60.1* OR activitePrincipaleEtablissement:90.0* OR activitePrincipaleEtablissement:32.1* OR activitePrincipaleEtablissement:14.1* OR activitePrincipaleEtablissement:93.1*&nombre=50",
        "options": {}
      },
      "name": "HTTP Request - SIRENE API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [-1872, -288],
      "id": "bad31119-a071-4e9d-8dff-3055ed6ef46c"
    },
    {
      "parameters": {
        "url": "https://www.data.gouv.fr/fr/datasets/r/0651fb76-bcf3-4f6a-a38d-bc04fa708576",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "name": "HTTP Request - CSV OpenData",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [-1872, -96],
      "id": "4f8baf3b-6547-4fc2-b4cc-c147f067bb83"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "name": "Merge - Fusionner Sources",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [-1648, -192],
      "id": "f3269a91-695c-453e-abf3-3832576d3803"
    },
    {
      "parameters": {
        "jsCode": "// Normaliser et enrichir les données avec ciblage correct\nconst sireneData = $input.first()?.json?.etablissements || [];\nconst csvData = $input.all()[1]?.json || '';\n\nconst prospects = [];\n\n// Traiter données SIRENE avec ciblage secteurs Black Road Music\nsireneData.forEach(etablissement => {\n  const uniteLegale = etablissement.uniteLegale || {};\n  const adresse = etablissement.adresseEtablissement || {};\n  \n  if (uniteLegale.denominationUniteLegale) {\n    const companyName = uniteLegale.denominationUniteLegale;\n    const email = generateBusinessEmail(companyName);\n    const website = generateWebsite(companyName);\n    \n    prospects.push({\n      company_name: companyName,\n      email: email,\n      website: website,\n      phone: null,\n      first_name: null,\n      last_name: null,\n      position: 'Contact',\n      segment_targeting: determineSegmentFromNAF(etablissement.activitePrincipaleEtablissement),\n      lead_score: calculateTargetedScore(etablissement),\n      source: 'sirene_api_targeted',\n      status: 'new',\n      enriched_data: {\n        company_info: {\n          industry: etablissement.activitePrincipaleEtablissement,\n          location: `${adresse.libelleCommuneEtablissement || ''} ${adresse.codePostalEtablissement || ''}`.trim(),\n          siret: etablissement.siret,\n          employees: uniteLegale.trancheEffectifsUniteLegale,\n          creation_date: uniteLegale.dateCreationUniteLegale\n        }\n      }\n    });\n  }\n});\n\n// Traiter CSV OpenData avec segmentation améliorée\nif (typeof csvData === 'string' && csvData.length > 0) {\n  const lines = csvData.split('\\n').slice(1, 26);\n  \n  lines.forEach(line => {\n    const columns = line.split(',');\n    if (columns.length >= 2 && columns[0] && columns[1]) {\n      const companyName = columns[0].replace(/\"/g, '').trim();\n      const sector = columns[1] ? columns[1].replace(/\"/g, '').trim() : '';\n      \n      if (companyName.length > 2 && isTargetSector(sector)) {\n        prospects.push({\n          company_name: companyName,\n          email: generateBusinessEmail(companyName),\n          website: generateWebsite(companyName),\n          phone: null,\n          first_name: null,\n          last_name: null,\n          position: 'Contact',\n          segment_targeting: determineSegmentFromSector(sector),\n          lead_score: calculateSectorScore(sector),\n          source: 'csv_opendata_targeted',\n          status: 'new',\n          enriched_data: {\n            company_info: {\n              industry: sector,\n              location: 'France'\n            }\n          }\n        });\n      }\n    }\n  });\n}\n\n// Fonctions de segmentation corrigées pour Black Road Music\nfunction determineSegmentFromNAF(naf) {\n  if (!naf) return ['general'];\n  \n  // Publicité et communication\n  if (naf.startsWith('73.1') || naf.startsWith('73.2')) return ['advertising'];\n  \n  // Production audiovisuelle et musicale\n  if (naf.startsWith('59.1') || naf.startsWith('60.1') || naf.startsWith('90.0')) return ['music'];\n  \n  // Luxe et mode\n  if (naf.startsWith('32.1') || naf.startsWith('14.1')) return ['luxury'];\n  \n  // Sport et événementiel\n  if (naf.startsWith('93.1')) return ['sports'];\n  \n  return ['general'];\n}\n\nfunction determineSegmentFromSector(sector) {\n  if (!sector) return ['general'];\n  \n  const sectorLower = sector.toLowerCase();\n  \n  // Mots-clés pour publicité\n  if (sectorLower.includes('publicité') || sectorLower.includes('marketing') || \n      sectorLower.includes('communication') || sectorLower.includes('agence')) {\n    return ['advertising'];\n  }\n  \n  // Mots-clés pour musique/créatif\n  if (sectorLower.includes('music') || sectorLower.includes('audio') || \n      sectorLower.includes('production') || sectorLower.includes('studio')) {\n    return ['music'];\n  }\n  \n  // Mots-clés pour luxe\n  if (sectorLower.includes('luxe') || sectorLower.includes('mode') || \n      sectorLower.includes('bijou') || sectorLower.includes('parfum')) {\n    return ['luxury'];\n  }\n  \n  // Mots-clés pour sport\n  if (sectorLower.includes('sport') || sectorLower.includes('fitness') || \n      sectorLower.includes('événement') || sectorLower.includes('compétition')) {\n    return ['sports'];\n  }\n  \n  return ['general'];\n}\n\nfunction isTargetSector(sector) {\n  if (!sector) return false;\n  const sectorLower = sector.toLowerCase();\n  \n  const targetKeywords = [\n    'publicité', 'marketing', 'communication', 'agence',\n    'music', 'audio', 'production', 'studio',\n    'luxe', 'mode', 'bijou', 'parfum',\n    'sport', 'fitness', 'événement', 'compétition'\n  ];\n  \n  return targetKeywords.some(keyword => sectorLower.includes(keyword));\n}\n\nfunction calculateTargetedScore(etablissement) {\n  let score = 20; // Score de base plus bas\n  \n  const uniteLegale = etablissement.uniteLegale || {};\n  const naf = etablissement.activitePrincipaleEtablissement;\n  \n  // Bonus majeur pour secteurs prioritaires\n  if (naf) {\n    if (naf.startsWith('90.0') || naf.startsWith('59.1') || naf.startsWith('60.1')) {\n      score += 40; // Secteur musical/créatif prioritaire\n    } else if (naf.startsWith('73.1') || naf.startsWith('73.2')) {\n      score += 35; // Publicité/communication\n    } else if (naf.startsWith('32.1') || naf.startsWith('14.1')) {\n      score += 30; // Luxe\n    } else if (naf.startsWith('93.1')) {\n      score += 25; // Sport\n    }\n  }\n  \n  // Bonus taille optimale (PME/ETI)\n  if (uniteLegale.trancheEffectifsUniteLegale) {\n    const effectifs = uniteLegale.trancheEffectifsUniteLegale;\n    if (effectifs.includes('10') || effectifs.includes('20') || effectifs.includes('50')) {\n      score += 20; // Taille optimale pour Black Road Music\n    } else if (effectifs.includes('100') || effectifs.includes('200')) {\n      score += 15;\n    } else if (effectifs.includes('500')) {\n      score += 5; // Grandes entreprises moins prioritaires\n    }\n  }\n  \n  // Bonus ancienneté (stabilité)\n  if (uniteLegale.dateCreationUniteLegale) {\n    const creationYear = new Date(uniteLegale.dateCreationUniteLegale).getFullYear();\n    const currentYear = new Date().getFullYear();\n    const age = currentYear - creationYear;\n    if (age >= 3 && age <= 15) score += 15; // Sweet spot\n    else if (age > 15) score += 10;\n  }\n  \n  // Pénalité pour concurrents directs\n  const companyName = uniteLegale.denominationUniteLegale?.toLowerCase() || '';\n  if (companyName.includes('studio') && companyName.includes('music')) {\n    score -= 20; // Concurrent direct\n  }\n  \n  return Math.min(Math.max(score, 10), 100);\n}\n\nfunction calculateSectorScore(sector) {\n  const sectorLower = sector.toLowerCase();\n  let score = 30;\n  \n  if (sectorLower.includes('music') || sectorLower.includes('audio')) score += 40;\n  else if (sectorLower.includes('publicité') || sectorLower.includes('marketing')) score += 35;\n  else if (sectorLower.includes('luxe') || sectorLower.includes('mode')) score += 30;\n  else if (sectorLower.includes('sport') || sectorLower.includes('événement')) score += 25;\n  \n  return Math.min(score, 100);\n}\n\nfunction generateBusinessEmail(companyName) {\n  const domain = companyName.toLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^a-z0-9]/g, '')\n    .substring(0, 15);\n  return `contact@${domain}.fr`;\n}\n\nfunction generateWebsite(companyName) {\n  const domain = companyName.toLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^a-z0-9]/g, '-')\n    .substring(0, 20);\n  return `https://www.${domain}.fr`;\n}\n\n// Dédoublonner et prioriser par score\nconst uniqueProspects = prospects.filter((prospect, index, self) => \n  index === self.findIndex(p => p.email === prospect.email)\n);\n\n// Trier par score décroissant et prendre les 20 meilleurs\nconst sortedProspects = uniqueProspects\n  .sort((a, b) => (b.lead_score || 0) - (a.lead_score || 0))\n  .slice(0, 20);\n\nreturn sortedProspects.map(prospect => ({ json: prospect }));"
      },
      "name": "Code - Normaliser Données",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1424, -192],
      "id": "ddf6c228-d2c1-4f30-930c-cffb2bf79e2f"
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Split In Batches - Traiter Un Par Un",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1200,
        -96
      ],
      "id": "95e9395d-2109-4ec9-85e9-b463d4d06be8"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "prospects",
        "limit": 1,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "email",
              "condition": "eq",
              "keyValue": "={{ $json.email }}"
            }
          ]
        }
      },
      "name": "Supabase - Vérifier Doublon",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -976,
        -96
      ],
      "id": "9fa5419d-fa5f-4f3d-800f-041bd06e1651",
      "credentials": {
        "supabaseApi": {
          "id": "uzACxqsfbZ9ewdmo",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              },
              "id": "69c441d9-f01e-4623-8d23-77859a53259d"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "If - Nouveau Prospect",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -752,
        -96
      ],
      "id": "f027c25b-70a7-4604-b2ee-9735bf30cdfe"
    },
    {
      "parameters": {
        "operation": "insert"
      },
      "name": "Supabase - Insérer Nouveau Prospect",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -528,
        -96
      ],
      "id": "1678cec1-a963-402a-95dd-837e0efd5830",
      "credentials": {
        "supabaseApi": {
          "id": "uzACxqsfbZ9ewdmo",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "blackroad-prospects-trigger",
        "options": {
          "noResponseBody": false
        }
      },
      "name": "Webhook - Déclencheur Admin",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1872,
        96
      ],
      "id": "c4776635-b691-443b-b045-59edbfb0a6e6",
      "webhookId": "a6dfdb96-ce2f-4e91-bfdf-bbc5c1752225"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "prospects",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "status",
              "condition": "eq",
              "keyValue": "new"
            }
          ]
        }
      },
      "name": "Supabase - Récupérer Nouveaux Prospects",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1648,
        96
      ],
      "id": "2cfcd359-8b03-4885-b3fa-eb85865c2d67",
      "credentials": {
        "supabaseApi": {
          "id": "uzACxqsfbZ9ewdmo",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Normaliser les prospects selon la structure existante\nconst prospects = $input.all();\n\nreturn prospects.map(item => ({\n  json: {\n    id: item.json.id,\n    company_name: item.json.company_name,\n    first_name: item.json.first_name,\n    last_name: item.json.last_name,\n    email: item.json.email,\n    phone: item.json.phone,\n    position: item.json.position,\n    website: item.json.website,\n    linkedin_url: item.json.linkedin_url,\n    status: item.json.status,\n    segment_targeting: item.json.segment_targeting || ['general'],\n    lead_score: item.json.lead_score || 0,\n    enriched_data: item.json.enriched_data || {},\n    tags: item.json.tags || [],\n    source: item.json.source || 'n8n_automation'\n  }\n}));"
      },
      "name": "Code - Normaliser Prospects",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1424,
        96
      ],
      "id": "29feeaca-0c53-4590-ad24-460e9fd1237b"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "email_tracking",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "prospect_id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "name": "Supabase - Vérifier Historique Email",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2096,
        320
      ],
      "id": "e0cfaedd-6b67-4f11-9879-913e95140b00",
      "credentials": {
        "supabaseApi": {
          "id": "uzACxqsfbZ9ewdmo",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              },
              "id": "0ed050fc-bcdb-4ef2-8d06-14306943c918"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "If - Premier Contact",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1872,
        320
      ],
      "id": "96c6028f-e547-4ead-b539-529643a3f1b0"
    },
    {
      "parameters": {
        "jsCode": "// Sélectionner le template selon le segment\nconst prospect = $input.first().json;\nconst segments = prospect.segment_targeting || ['general'];\nconst leadScore = prospect.lead_score || 0;\n\n// Logique de sélection de template basée sur les segments existants\nlet templateKey = 'visual_intro_advertising'; // template par défaut\n\nif (segments.includes('enterprise')) {\n  templateKey = leadScore > 70 ? 'detailed_commercial_proposal' : 'visual_intro_advertising';\n} else if (segments.includes('creative_agencies')) {\n  templateKey = 'film_intro_specialized';\n} else if (segments.includes('startups')) {\n  templateKey = 'portfolio_presentation_demo';\n} else if (segments.includes('music')) {\n  templateKey = 'music_production_intro';\n}\n\nreturn [{\n  json: {\n    ...prospect,\n    selected_template: templateKey,\n    priority: leadScore > 70 ? 'high' : leadScore > 40 ? 'medium' : 'low'\n  }\n}];"
      },
      "name": "Code - Sélectionner Template",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1648,
        320
      ],
      "id": "731f1637-4481-4287-9c2e-8d8776be2697"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "email_templates",
        "limit": 1,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "template_key",
              "condition": "eq",
              "keyValue": "={{ $json.selected_template }}"
            },
            {
              "keyName": "is_active",
              "condition": "eq",
              "keyValue": true
            }
          ]
        }
      },
      "name": "Supabase - Récupérer Template",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1424,
        320
      ],
      "id": "1cc26270-9a11-4b1f-b8a4-0778a73cc077",
      "credentials": {
        "supabaseApi": {
          "id": "uzACxqsfbZ9ewdmo",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Compiler le template avec les données du prospect\nconst prospect = $input.first().json;\nconst template = $input.all()[1].json;\n\nif (!template) {\n  throw new Error('Template non trouvé');\n}\n\n// Variables de remplacement\nconst variables = {\n  contact_name: prospect.first_name || 'Bonjour',\n  company_name: prospect.company_name || 'votre entreprise',\n  sender_name: 'Olivier Payko',\n  industry: prospect.enriched_data?.company_info?.industry || 'votre secteur',\n  position: prospect.position || 'votre poste'\n};\n\n// Remplacer les variables dans le contenu\nlet compiledContent = template.content;\nlet compiledSubject = template.subject;\n\nObject.entries(variables).forEach(([key, value]) => {\n  const regex = new RegExp(`{{${key}}}`, 'g');\n  compiledContent = compiledContent.replace(regex, value);\n  compiledSubject = compiledSubject.replace(regex, value);\n});\n\nreturn [{\n  json: {\n    prospect_id: prospect.id,\n    template_id: template.id,\n    to_email: prospect.email,\n    from_email: 'contact@blackroadmusic.com',\n    subject: compiledSubject,\n    content: compiledContent,\n    priority: prospect.priority,\n    segment: prospect.segment_targeting[0] || 'general',\n    prospect_data: prospect,\n    template_data: template\n  }\n}];"
      },
      "name": "Code - Compiler Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1200,
        320
      ],
      "id": "6fc13305-ca2b-426c-acf9-ae47e3525c22"
    },
    {
      "parameters": {
        "isBodyHtml": true,
        "subject": "={{ $json.subject }}",
        "body": "={{ $json.content }}",
        "fromEmail": "blackroadmusic@hotmail.com",
        "toAddresses": [
          "={{ $json.to_email }}"
        ],
        "additionalFields": {
          "configurationSetName": "blackroad-email-tracking",
          "replyToAddresses": [
            "blackroadmusic@hotmail.com"
          ]
        }
      },
      "name": "AWS SES - Envoyer Email",
      "type": "n8n-nodes-base.awsSes",
      "typeVersion": 1,
      "position": [
        -976,
        320
      ],
      "id": "f0b8533a-41de-4ac4-a1e0-801516562a5b",
      "credentials": {
        "aws": {
          "id": "mLXdmUIRtaWGuulr",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "email_tracking",
        "dataToSend": "autoMapInputData"
      },
      "name": "Supabase - Enregistrer Tracking",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -752,
        320
      ],
      "id": "14a8e6dc-0faf-4450-8b73-681d942ce325",
      "credentials": {
        "supabaseApi": {
          "id": "uzACxqsfbZ9ewdmo",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.prospect_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "contacted"
            },
            {
              "fieldId": "last_contact_date",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "name": "Supabase - Mettre à Jour Prospect",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -528,
        320
      ],
      "id": "3ee32090-320b-4d26-a43d-9f0e7c9e1fae",
      "credentials": {
        "supabaseApi": {
          "id": "uzACxqsfbZ9ewdmo",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "path": "blackroad-prospects-stats",
        "options": {}
      },
      "name": "Webhook - Statistiques",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2096,
        544
      ],
      "id": "17220257-86a2-477f-ab90-f28813f746ea",
      "webhookId": "6dc8882e-af96-432a-bb81-b30f683dfaf3"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "email_tracking",
        "returnAll": true
      },
      "name": "Supabase - Récupérer Statistiques",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1872,
        544
      ],
      "id": "1b46722c-3d91-4525-be38-3483000cdb65",
      "credentials": {
        "supabaseApi": {
          "id": "uzACxqsfbZ9ewdmo",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Calculer les statistiques de performance\nconst emailData = $input.all();\n\nconst stats = {\n  total_sent: emailData.length,\n  total_opened: emailData.filter(item => item.json.opened_at).length,\n  total_responded: emailData.filter(item => item.json.responded_at).length,\n  open_rate: 0,\n  response_rate: 0,\n  recent_emails: emailData.slice(0, 10).map(item => ({\n    id: item.json.id,\n    subject: item.json.subject,\n    status: item.json.email_status,\n    sent_at: item.json.sent_at,\n    company: item.json.prospects?.[0]?.company_name || 'N/A'\n  }))\n};\n\nif (stats.total_sent > 0) {\n  stats.open_rate = (stats.total_opened / stats.total_sent * 100).toFixed(2);\n  stats.response_rate = (stats.total_responded / stats.total_sent * 100).toFixed(2);\n}\n\nreturn [{ json: stats }];"
      },
      "name": "Code - Calculer Statistiques",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1648,
        544
      ],
      "id": "9fd34904-1270-40f8-b32b-32e87ecb477f"
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Respond to Webhook - Retourner Statistiques",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -1424,
        544
      ],
      "id": "899fed4c-99d6-4eab-b2c0-ee36bc86b0f2"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "blackroad-email-webhook",
        "options": {}
      },
      "name": "Webhook - Tracking Email (SES)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2096,
        768
      ],
      "id": "e4ca63d9-d10a-4f55-b7bc-7f5d002c879d",
      "webhookId": "46a8e3a7-8f3a-4326-8a72-0730541eec08"
    },
    {
      "parameters": {
        "jsCode": "// Traiter les événements de tracking SES\nconst event = $input.first().json;\nconst eventType = event.eventType || event.Type;\nconst messageId = event.mail?.messageId || event.MessageId;\n\nif (!messageId) {\n  throw new Error('Message ID manquant');\n}\n\nlet updateData = {\n  updated_at: new Date().toISOString()\n};\n\nswitch (eventType) {\n  case 'open':\n  case 'Open':\n    updateData.opened_at = new Date().toISOString();\n    updateData.email_status = 'opened';\n    break;\n  case 'click':\n  case 'Click':\n    updateData.clicked_at = new Date().toISOString();\n    updateData.email_status = 'clicked';\n    break;\n  case 'bounce':\n  case 'Bounce':\n    updateData.bounced_at = new Date().toISOString();\n    updateData.email_status = 'bounced';\n    break;\n  case 'complaint':\n  case 'Complaint':\n    updateData.complained_at = new Date().toISOString();\n    updateData.email_status = 'complained';\n    break;\n  case 'delivery':\n  case 'Delivery':\n    updateData.delivered_at = new Date().toISOString();\n    updateData.email_status = 'delivered';\n    break;\n}\n\nreturn [{\n  json: {\n    messageId: messageId,\n    eventType: eventType,\n    updateData: updateData\n  }\n}];"
      },
      "name": "Code - Traiter Événement SES",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1872,
        768
      ],
      "id": "594d74ee-41ba-47ba-bbb9-4fa4e6f9f436"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "email_tracking",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "message_id",
              "condition": "eq",
              "keyValue": "={{ $json.messageId }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "email_status",
              "fieldValue": "={{ $json.updateData.email_status }}"
            },
            {
              "fieldId": "opened_at",
              "fieldValue": "={{ $json.updateData.opened_at }}"
            },
            {
              "fieldId": "clicked_at",
              "fieldValue": "={{ $json.updateData.clicked_at }}"
            },
            {
              "fieldId": "bounced_at",
              "fieldValue": "={{ $json.updateData.bounced_at }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $json.updateData.updated_at }}"
            }
          ]
        }
      },
      "name": "Supabase - Mettre à Jour Tracking",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1648,
        768
      ],
      "id": "0986264c-0080-4bbf-8656-a702704a62b8",
      "credentials": {
        "supabaseApi": {
          "id": "uzACxqsfbZ9ewdmo",
          "name": "Supabase account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Cron - Alimentation Prospects (15 jours)": {
      "main": [
        [
          {
            "node": "HTTP Request - SIRENE API",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request - CSV OpenData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - SIRENE API": {
      "main": [
        [
          {
            "node": "Merge - Fusionner Sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - CSV OpenData": {
      "main": [
        [
          {
            "node": "Merge - Fusionner Sources",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge - Fusionner Sources": {
      "main": [
        [
          {
            "node": "Code - Normaliser Données",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Normaliser Données": {
      "main": [
        [
          {
            "node": "Split In Batches - Traiter Un Par Un",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches - Traiter Un Par Un": {
      "main": [
        [
          {
            "node": "Supabase - Vérifier Doublon",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Vérifier Doublon": {
      "main": [
        [
          {
            "node": "If - Nouveau Prospect",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If - Nouveau Prospect": {
      "main": [
        [
          {
            "node": "Supabase - Insérer Nouveau Prospect",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - Déclencheur Admin": {
      "main": [
        [
          {
            "node": "Supabase - Récupérer Nouveaux Prospects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Récupérer Nouveaux Prospects": {
      "main": [
        [
          {
            "node": "Code - Normaliser Prospects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Normaliser Prospects": {
      "main": [
        [
          {
            "node": "Split In Batches - Traiter Un Par Un",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Vérifier Historique Email": {
      "main": [
        [
          {
            "node": "If - Premier Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If - Premier Contact": {
      "main": [
        [
          {
            "node": "Code - Sélectionner Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Sélectionner Template": {
      "main": [
        [
          {
            "node": "Supabase - Récupérer Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Récupérer Template": {
      "main": [
        [
          {
            "node": "Code - Compiler Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Compiler Email": {
      "main": [
        [
          {
            "node": "AWS SES - Envoyer Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS SES - Envoyer Email": {
      "main": [
        [
          {
            "node": "Supabase - Enregistrer Tracking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Enregistrer Tracking": {
      "main": [
        [
          {
            "node": "Supabase - Mettre à Jour Prospect",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - Statistiques": {
      "main": [
        [
          {
            "node": "Supabase - Récupérer Statistiques",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Récupérer Statistiques": {
      "main": [
        [
          {
            "node": "Code - Calculer Statistiques",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Calculer Statistiques": {
      "main": [
        [
          {
            "node": "Respond to Webhook - Retourner Statistiques",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - Tracking Email (SES)": {
      "main": [
        [
          {
            "node": "Code - Traiter Événement SES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Traiter Événement SES": {
      "main": [
        [
          {
            "node": "Supabase - Mettre à Jour Tracking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c0cdcf7c-83ba-4711-81cc-66d6d7e19084",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7b8d870612a288a9ecbcbf186601f95a9b7e553543809890e857464aff24024d"
  },
  "id": "UGK0bfeuwEnmASsO",
  "tags": []
}